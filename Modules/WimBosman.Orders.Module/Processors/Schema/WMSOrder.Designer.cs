// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>MWS2CeyenneNXT.SalesOrder.Import</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>True</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace WimBosman.Process.Order.Schema
{
  using System;
  using System.Diagnostics;
  using System.Xml.Serialization;
  using System.Collections;
  using System.Xml.Schema;
  using System.ComponentModel;
  using System.IO;
  using System.Text;
  using System.Xml;
  using System.Collections.Generic;


  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://wimbosman.com/order")]
  [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://wimbosman.com/order", IsNullable = false)]
  public partial class salesorder
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string order_id { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string languagecode { get; set; }
    public System.DateTime createdat { get; set; }
    public orderType ordertype { get; set; }
    public int totalqtyordered { get; set; }
    public int customizedArticles { get; set; }
    public currencyCodeAlpha3Type ordercurrencycode { get; set; }
    public currencyCodeAlpha3Type basecurrencycode { get; set; }
    public bool ismultipayment { get; set; }
    public decimal subtotal { get; set; }
    public decimal basesubtotal { get; set; }
    public decimal shippingamount { get; set; }
    public decimal baseshippingamount { get; set; }
    public decimal shippingtaxpercent { get; set; }
    public decimal shippingtaxamount { get; set; }
    public decimal baseshippingtaxamount { get; set; }
    public decimal shopcreditamount { get; set; }
    public decimal baseshopcreditamount { get; set; }
    public decimal taxamount { get; set; }
    public decimal basetaxamount { get; set; }
    public decimal grandtotal { get; set; }
    public decimal basegrandtotal { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string customertaxvat { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string logisticdebitor { get; set; }
    public decimal codtax { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool codtaxSpecified { get; set; }
    public decimal basecodtax { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool basecodtaxSpecified { get; set; }
    public decimal codfee { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool codfeeSpecified { get; set; }
    public decimal basecodfee { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool basecodfeeSpecified { get; set; }
    public decimal codtaxpercent { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool codtaxpercentSpecified { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string discountdescription { get; set; }
    public decimal discountpercent { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool discountpercentSpecified { get; set; }
    public decimal maximaldiscountablevalue { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool maximaldiscountablevalueSpecified { get; set; }
    public decimal basemaximaldiscountablevalue { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool basemaximaldiscountablevalueSpecified { get; set; }
    public decimal discountamount { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool discountamountSpecified { get; set; }
    public decimal basediscountamount { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool basediscountamountSpecified { get; set; }
    public decimal employeediscount { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool employeediscountSpecified { get; set; }
    public decimal baseemployeediscount { get; set; }
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool baseemployeediscountSpecified { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string dealeraccount { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string dealerreferencenumber { get; set; }
    public Shipping shipping { get; set; }
    public Billing billing { get; set; }
    public Payment payment { get; set; }
    [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable = false)]
    public List<Item> items { get; set; }

    public salesorder()
    {
      this.items = new List<Item>();
      this.payment = new Payment();
      this.billing = new Billing();
      this.shipping = new Shipping();
    }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(salesorder));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current salesorder object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an salesorder object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output salesorder object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out salesorder obj, out System.Exception exception)
    {
      exception = null;
      obj = default(salesorder);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out salesorder obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static salesorder Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((salesorder)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static salesorder Deserialize(System.IO.Stream s)
    {
      return ((salesorder)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current salesorder object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an salesorder object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output salesorder object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out salesorder obj, out System.Exception exception)
    {
      exception = null;
      obj = default(salesorder);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out salesorder obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out salesorder obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static salesorder LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static salesorder LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public enum orderType
  {

    /// <remarks/>
    B2C,

    /// <remarks/>
    B2P,

    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("B2C-TEST")]
    B2CTEST,

    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("B2P-TEST")]
    B2PTEST,
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.itu.int/tML/tML-ISO-4217")]
  public enum currencyCodeAlpha3Type
  {

    /// <remarks/>
    ADP,

    /// <remarks/>
    AED,

    /// <remarks/>
    AFA,

    /// <remarks/>
    ALL,

    /// <remarks/>
    AMD,

    /// <remarks/>
    ANG,

    /// <remarks/>
    AOA,

    /// <remarks/>
    ARS,

    /// <remarks/>
    ATS,

    /// <remarks/>
    AUD,

    /// <remarks/>
    AWG,

    /// <remarks/>
    AZM,

    /// <remarks/>
    BAM,

    /// <remarks/>
    BBD,

    /// <remarks/>
    BDT,

    /// <remarks/>
    BEF,

    /// <remarks/>
    BGL,

    /// <remarks/>
    BGN,

    /// <remarks/>
    BHD,

    /// <remarks/>
    BIF,

    /// <remarks/>
    BMD,

    /// <remarks/>
    BND,

    /// <remarks/>
    BOB,

    /// <remarks/>
    BOV,

    /// <remarks/>
    BRL,

    /// <remarks/>
    BSD,

    /// <remarks/>
    BTN,

    /// <remarks/>
    BWP,

    /// <remarks/>
    BYB,

    /// <remarks/>
    BYR,

    /// <remarks/>
    BZD,

    /// <remarks/>
    CAD,

    /// <remarks/>
    CDF,

    /// <remarks/>
    CHF,

    /// <remarks/>
    CLF,

    /// <remarks/>
    CLP,

    /// <remarks/>
    CNY,

    /// <remarks/>
    COP,

    /// <remarks/>
    CRC,

    /// <remarks/>
    CUP,

    /// <remarks/>
    CVE,

    /// <remarks/>
    CYP,

    /// <remarks/>
    CZK,

    /// <remarks/>
    DEM,

    /// <remarks/>
    DJF,

    /// <remarks/>
    DKK,

    /// <remarks/>
    DOP,

    /// <remarks/>
    DZD,

    /// <remarks/>
    EEK,

    /// <remarks/>
    EGP,

    /// <remarks/>
    ERN,

    /// <remarks/>
    ESP,

    /// <remarks/>
    ETB,

    /// <remarks/>
    EUR,

    /// <remarks/>
    FIM,

    /// <remarks/>
    FJD,

    /// <remarks/>
    FKP,

    /// <remarks/>
    FRF,

    /// <remarks/>
    GBP,

    /// <remarks/>
    GEL,

    /// <remarks/>
    GHC,

    /// <remarks/>
    GIP,

    /// <remarks/>
    GMD,

    /// <remarks/>
    GNF,

    /// <remarks/>
    GRD,

    /// <remarks/>
    GTQ,

    /// <remarks/>
    GWP,

    /// <remarks/>
    GYD,

    /// <remarks/>
    HKD,

    /// <remarks/>
    HNL,

    /// <remarks/>
    HRK,

    /// <remarks/>
    HTG,

    /// <remarks/>
    HUF,

    /// <remarks/>
    IDR,

    /// <remarks/>
    IEP,

    /// <remarks/>
    ILS,

    /// <remarks/>
    INR,

    /// <remarks/>
    IQD,

    /// <remarks/>
    IRR,

    /// <remarks/>
    ISK,

    /// <remarks/>
    ITL,

    /// <remarks/>
    JMD,

    /// <remarks/>
    JOD,

    /// <remarks/>
    JPY,

    /// <remarks/>
    KES,

    /// <remarks/>
    KGS,

    /// <remarks/>
    KHR,

    /// <remarks/>
    KMF,

    /// <remarks/>
    KPW,

    /// <remarks/>
    KRW,

    /// <remarks/>
    KWD,

    /// <remarks/>
    KYD,

    /// <remarks/>
    KZT,

    /// <remarks/>
    LAK,

    /// <remarks/>
    LBP,

    /// <remarks/>
    LKR,

    /// <remarks/>
    LRD,

    /// <remarks/>
    LSL,

    /// <remarks/>
    LTL,

    /// <remarks/>
    LUF,

    /// <remarks/>
    LVL,

    /// <remarks/>
    LYD,

    /// <remarks/>
    MAD,

    /// <remarks/>
    MDL,

    /// <remarks/>
    MGF,

    /// <remarks/>
    MKD,

    /// <remarks/>
    MMK,

    /// <remarks/>
    MNT,

    /// <remarks/>
    MOP,

    /// <remarks/>
    MRO,

    /// <remarks/>
    MTL,

    /// <remarks/>
    MUR,

    /// <remarks/>
    MVR,

    /// <remarks/>
    MWK,

    /// <remarks/>
    MXN,

    /// <remarks/>
    MXV,

    /// <remarks/>
    MYR,

    /// <remarks/>
    MZM,

    /// <remarks/>
    NAD,

    /// <remarks/>
    NGN,

    /// <remarks/>
    NIO,

    /// <remarks/>
    NLG,

    /// <remarks/>
    NOK,

    /// <remarks/>
    NPR,

    /// <remarks/>
    NZD,

    /// <remarks/>
    OMR,

    /// <remarks/>
    PAB,

    /// <remarks/>
    PEN,

    /// <remarks/>
    PGK,

    /// <remarks/>
    PHP,

    /// <remarks/>
    PKR,

    /// <remarks/>
    PLN,

    /// <remarks/>
    PTE,

    /// <remarks/>
    PYG,

    /// <remarks/>
    QAR,

    /// <remarks/>
    ROL,

    /// <remarks/>
    RUB,

    /// <remarks/>
    RUR,

    /// <remarks/>
    RWF,

    /// <remarks/>
    SAR,

    /// <remarks/>
    SBD,

    /// <remarks/>
    SCR,

    /// <remarks/>
    SDD,

    /// <remarks/>
    SEK,

    /// <remarks/>
    SGD,

    /// <remarks/>
    SHP,

    /// <remarks/>
    SIT,

    /// <remarks/>
    SKK,

    /// <remarks/>
    SLL,

    /// <remarks/>
    SOS,

    /// <remarks/>
    SRG,

    /// <remarks/>
    STD,

    /// <remarks/>
    SVC,

    /// <remarks/>
    SYP,

    /// <remarks/>
    SZL,

    /// <remarks/>
    THB,

    /// <remarks/>
    TJR,

    /// <remarks/>
    TMM,

    /// <remarks/>
    TND,

    /// <remarks/>
    TOP,

    /// <remarks/>
    TPE,

    /// <remarks/>
    TRL,

    /// <remarks/>
    TTD,

    /// <remarks/>
    TWD,

    /// <remarks/>
    TZS,

    /// <remarks/>
    UAH,

    /// <remarks/>
    UGX,

    /// <remarks/>
    USD,

    /// <remarks/>
    UYU,

    /// <remarks/>
    UZS,

    /// <remarks/>
    VEB,

    /// <remarks/>
    VND,

    /// <remarks/>
    VUV,

    /// <remarks/>
    WST,

    /// <remarks/>
    XAF,

    /// <remarks/>
    XCD,

    /// <remarks/>
    XDR,

    /// <remarks/>
    XOF,

    /// <remarks/>
    XPF,

    /// <remarks/>
    YER,

    /// <remarks/>
    YUM,

    /// <remarks/>
    ZAR,

    /// <remarks/>
    ZMK,

    /// <remarks/>
    ZWD,
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public partial class Shipping
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string firstname { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string lastname { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string company { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string street { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string city { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string postcode { get; set; }
    public ISO3166CountryCode countryid { get; set; }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(Shipping));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current Shipping object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an Shipping object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output Shipping object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out Shipping obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Shipping);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out Shipping obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static Shipping Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((Shipping)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static Shipping Deserialize(System.IO.Stream s)
    {
      return ((Shipping)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current Shipping object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an Shipping object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output Shipping object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Shipping obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Shipping);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out Shipping obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out Shipping obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static Shipping LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static Shipping LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://iso.org/iso3166-alpha-2")]
  public enum ISO3166CountryCode
  {

    /// <remarks/>
    AF,

    /// <remarks/>
    AX,

    /// <remarks/>
    AL,

    /// <remarks/>
    DZ,

    /// <remarks/>
    AS,

    /// <remarks/>
    AD,

    /// <remarks/>
    AO,

    /// <remarks/>
    AI,

    /// <remarks/>
    AQ,

    /// <remarks/>
    AG,

    /// <remarks/>
    AR,

    /// <remarks/>
    AM,

    /// <remarks/>
    AW,

    /// <remarks/>
    AU,

    /// <remarks/>
    AT,

    /// <remarks/>
    AZ,

    /// <remarks/>
    BS,

    /// <remarks/>
    BH,

    /// <remarks/>
    BD,

    /// <remarks/>
    BB,

    /// <remarks/>
    BY,

    /// <remarks/>
    BE,

    /// <remarks/>
    BZ,

    /// <remarks/>
    BJ,

    /// <remarks/>
    BM,

    /// <remarks/>
    BT,

    /// <remarks/>
    BO,

    /// <remarks/>
    BA,

    /// <remarks/>
    BW,

    /// <remarks/>
    BV,

    /// <remarks/>
    BR,

    /// <remarks/>
    IO,

    /// <remarks/>
    BN,

    /// <remarks/>
    BG,

    /// <remarks/>
    BF,

    /// <remarks/>
    BI,

    /// <remarks/>
    KH,

    /// <remarks/>
    CM,

    /// <remarks/>
    CA,

    /// <remarks/>
    CV,

    /// <remarks/>
    KY,

    /// <remarks/>
    CF,

    /// <remarks/>
    TD,

    /// <remarks/>
    CL,

    /// <remarks/>
    CN,

    /// <remarks/>
    CX,

    /// <remarks/>
    CC,

    /// <remarks/>
    CO,

    /// <remarks/>
    KM,

    /// <remarks/>
    CG,

    /// <remarks/>
    CD,

    /// <remarks/>
    CK,

    /// <remarks/>
    CR,

    /// <remarks/>
    CI,

    /// <remarks/>
    HR,

    /// <remarks/>
    CU,

    /// <remarks/>
    CY,

    /// <remarks/>
    CZ,

    /// <remarks/>
    DK,

    /// <remarks/>
    DJ,

    /// <remarks/>
    DM,

    /// <remarks/>
    DO,

    /// <remarks/>
    EC,

    /// <remarks/>
    EG,

    /// <remarks/>
    SV,

    /// <remarks/>
    GQ,

    /// <remarks/>
    ER,

    /// <remarks/>
    EE,

    /// <remarks/>
    ET,

    /// <remarks/>
    FK,

    /// <remarks/>
    FO,

    /// <remarks/>
    FJ,

    /// <remarks/>
    FI,

    /// <remarks/>
    FR,

    /// <remarks/>
    GF,

    /// <remarks/>
    PF,

    /// <remarks/>
    TF,

    /// <remarks/>
    GA,

    /// <remarks/>
    GM,

    /// <remarks/>
    GE,

    /// <remarks/>
    DE,

    /// <remarks/>
    GH,

    /// <remarks/>
    GI,

    /// <remarks/>
    GR,

    /// <remarks/>
    GL,

    /// <remarks/>
    GD,

    /// <remarks/>
    GP,

    /// <remarks/>
    GU,

    /// <remarks/>
    GT,

    /// <remarks/>
    GG,

    /// <remarks/>
    GN,

    /// <remarks/>
    GW,

    /// <remarks/>
    GY,

    /// <remarks/>
    HT,

    /// <remarks/>
    HM,

    /// <remarks/>
    VA,

    /// <remarks/>
    HN,

    /// <remarks/>
    HK,

    /// <remarks/>
    HU,

    /// <remarks/>
    IS,

    /// <remarks/>
    IN,

    /// <remarks/>
    ID,

    /// <remarks/>
    IR,

    /// <remarks/>
    IQ,

    /// <remarks/>
    IE,

    /// <remarks/>
    IM,

    /// <remarks/>
    IL,

    /// <remarks/>
    IT,

    /// <remarks/>
    JM,

    /// <remarks/>
    JP,

    /// <remarks/>
    JE,

    /// <remarks/>
    JO,

    /// <remarks/>
    KZ,

    /// <remarks/>
    KE,

    /// <remarks/>
    KI,

    /// <remarks/>
    KP,

    /// <remarks/>
    KR,

    /// <remarks/>
    KW,

    /// <remarks/>
    KG,

    /// <remarks/>
    LA,

    /// <remarks/>
    LV,

    /// <remarks/>
    LB,

    /// <remarks/>
    LS,

    /// <remarks/>
    LR,

    /// <remarks/>
    LY,

    /// <remarks/>
    LI,

    /// <remarks/>
    LT,

    /// <remarks/>
    LU,

    /// <remarks/>
    MO,

    /// <remarks/>
    MK,

    /// <remarks/>
    MG,

    /// <remarks/>
    MW,

    /// <remarks/>
    MY,

    /// <remarks/>
    MV,

    /// <remarks/>
    ML,

    /// <remarks/>
    MT,

    /// <remarks/>
    MH,

    /// <remarks/>
    MQ,

    /// <remarks/>
    MR,

    /// <remarks/>
    MU,

    /// <remarks/>
    YT,

    /// <remarks/>
    MX,

    /// <remarks/>
    FM,

    /// <remarks/>
    MD,

    /// <remarks/>
    MC,

    /// <remarks/>
    MN,

    /// <remarks/>
    ME,

    /// <remarks/>
    MS,

    /// <remarks/>
    MA,

    /// <remarks/>
    MZ,

    /// <remarks/>
    MM,

    /// <remarks/>
    NA,

    /// <remarks/>
    NR,

    /// <remarks/>
    NP,

    /// <remarks/>
    NL,

    /// <remarks/>
    AN,

    /// <remarks/>
    NC,

    /// <remarks/>
    NZ,

    /// <remarks/>
    NI,

    /// <remarks/>
    NE,

    /// <remarks/>
    NG,

    /// <remarks/>
    NU,

    /// <remarks/>
    NF,

    /// <remarks/>
    MP,

    /// <remarks/>
    NO,

    /// <remarks/>
    OM,

    /// <remarks/>
    PK,

    /// <remarks/>
    PW,

    /// <remarks/>
    PS,

    /// <remarks/>
    PA,

    /// <remarks/>
    PG,

    /// <remarks/>
    PY,

    /// <remarks/>
    PE,

    /// <remarks/>
    PH,

    /// <remarks/>
    PN,

    /// <remarks/>
    PL,

    /// <remarks/>
    PT,

    /// <remarks/>
    PR,

    /// <remarks/>
    QA,

    /// <remarks/>
    RE,

    /// <remarks/>
    RO,

    /// <remarks/>
    RU,

    /// <remarks/>
    RW,

    /// <remarks/>
    BL,

    /// <remarks/>
    SH,

    /// <remarks/>
    KN,

    /// <remarks/>
    LC,

    /// <remarks/>
    MF,

    /// <remarks/>
    PM,

    /// <remarks/>
    VC,

    /// <remarks/>
    WS,

    /// <remarks/>
    SM,

    /// <remarks/>
    ST,

    /// <remarks/>
    SA,

    /// <remarks/>
    SN,

    /// <remarks/>
    RS,

    /// <remarks/>
    SC,

    /// <remarks/>
    SL,

    /// <remarks/>
    SG,

    /// <remarks/>
    SK,

    /// <remarks/>
    SI,

    /// <remarks/>
    SB,

    /// <remarks/>
    SO,

    /// <remarks/>
    ZA,

    /// <remarks/>
    GS,

    /// <remarks/>
    ES,

    /// <remarks/>
    LK,

    /// <remarks/>
    SD,

    /// <remarks/>
    SR,

    /// <remarks/>
    SJ,

    /// <remarks/>
    SZ,

    /// <remarks/>
    SE,

    /// <remarks/>
    CH,

    /// <remarks/>
    SY,

    /// <remarks/>
    TW,

    /// <remarks/>
    TJ,

    /// <remarks/>
    TZ,

    /// <remarks/>
    TH,

    /// <remarks/>
    TL,

    /// <remarks/>
    TG,

    /// <remarks/>
    TK,

    /// <remarks/>
    TO,

    /// <remarks/>
    TT,

    /// <remarks/>
    TN,

    /// <remarks/>
    TR,

    /// <remarks/>
    TM,

    /// <remarks/>
    TC,

    /// <remarks/>
    TV,

    /// <remarks/>
    UG,

    /// <remarks/>
    UA,

    /// <remarks/>
    AE,

    /// <remarks/>
    GB,

    /// <remarks/>
    US,

    /// <remarks/>
    UM,

    /// <remarks/>
    UY,

    /// <remarks/>
    UZ,

    /// <remarks/>
    VU,

    /// <remarks/>
    VE,

    /// <remarks/>
    VN,

    /// <remarks/>
    VG,

    /// <remarks/>
    VI,

    /// <remarks/>
    WF,

    /// <remarks/>
    EH,

    /// <remarks/>
    YE,

    /// <remarks/>
    ZM,

    /// <remarks/>
    ZW,
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public partial class Option
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string label { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string value { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string printvalue { get; set; }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(Option));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current Option object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an Option object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output Option object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out Option obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Option);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out Option obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static Option Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((Option)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static Option Deserialize(System.IO.Stream s)
    {
      return ((Option)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current Option object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an Option object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output Option object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Option obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Option);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out Option obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out Option obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static Option LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static Option LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public partial class AttributesInfo
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string label { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string value { get; set; }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(AttributesInfo));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current AttributesInfo object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an AttributesInfo object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output AttributesInfo object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out AttributesInfo obj, out System.Exception exception)
    {
      exception = null;
      obj = default(AttributesInfo);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out AttributesInfo obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static AttributesInfo Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((AttributesInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static AttributesInfo Deserialize(System.IO.Stream s)
    {
      return ((AttributesInfo)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current AttributesInfo object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an AttributesInfo object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output AttributesInfo object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AttributesInfo obj, out System.Exception exception)
    {
      exception = null;
      obj = default(AttributesInfo);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out AttributesInfo obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out AttributesInfo obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static AttributesInfo LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static AttributesInfo LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public partial class Item
  {

    private static XmlSerializer serializer;

    public int position { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string sku { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string name { get; set; }
    public int qtyordered { get; set; }
    public decimal price { get; set; }
    public decimal baseprice { get; set; }
    public decimal discountpercent { get; set; }
    public decimal discountamount { get; set; }
    public decimal basediscountamount { get; set; }
    public decimal taxpercent { get; set; }
    public decimal taxamount { get; set; }
    public decimal basetaxamount { get; set; }
    [System.Xml.Serialization.XmlArrayItemAttribute("attributesinfo", IsNullable = false)]
    public List<AttributesInfo> productoptions { get; set; }
    [System.Xml.Serialization.XmlArrayItemAttribute("option", IsNullable = false)]
    public List<Option> options { get; set; }

    public Item()
    {
      this.options = new List<Option>();
      this.productoptions = new List<AttributesInfo>();
    }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(Item));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current Item object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an Item object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output Item object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out Item obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Item);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out Item obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static Item Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((Item)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static Item Deserialize(System.IO.Stream s)
    {
      return ((Item)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current Item object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an Item object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output Item object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Item obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Item);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out Item obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out Item obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static Item LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static Item LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public partial class Payment
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string method { get; set; }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(Payment));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current Payment object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an Payment object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output Payment object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out Payment obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Payment);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out Payment obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static Payment Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((Payment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static Payment Deserialize(System.IO.Stream s)
    {
      return ((Payment)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current Payment object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an Payment object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output Payment object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Payment obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Payment);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out Payment obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out Payment obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static Payment LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static Payment LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://wimbosman.com/order")]
  public partial class Billing
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string firstname { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string lastname { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string company { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string street { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string city { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string postcode { get; set; }
    public ISO3166CountryCode countryid { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string telephone { get; set; }
    [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString")]
    public string email { get; set; }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(Billing));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current Billing object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an Billing object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output Billing object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out Billing obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Billing);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out Billing obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static Billing Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((Billing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static Billing Deserialize(System.IO.Stream s)
    {
      return ((Billing)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current Billing object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an Billing object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output Billing object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Billing obj, out System.Exception exception)
    {
      exception = null;
      obj = default(Billing);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out Billing obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out Billing obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static Billing LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static Billing LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://wimbosman.com/order")]
  [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://wimbosman.com/order", IsNullable = false)]
  public partial class items
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute("item")]
    public List<Item> item { get; set; }

    public items()
    {
      this.item = new List<Item>();
    }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(items));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current items object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an items object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output items object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out items obj, out System.Exception exception)
    {
      exception = null;
      obj = default(items);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out items obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static items Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((items)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static items Deserialize(System.IO.Stream s)
    {
      return ((items)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current items object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an items object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output items object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out items obj, out System.Exception exception)
    {
      exception = null;
      obj = default(items);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out items obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out items obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static items LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static items LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://wimbosman.com/order")]
  [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://wimbosman.com/order", IsNullable = false)]
  public partial class productoptions
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute("attributesinfo")]
    public List<AttributesInfo> attributesinfo { get; set; }

    public productoptions()
    {
      this.attributesinfo = new List<AttributesInfo>();
    }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(productoptions));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current productoptions object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an productoptions object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output productoptions object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out productoptions obj, out System.Exception exception)
    {
      exception = null;
      obj = default(productoptions);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out productoptions obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static productoptions Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((productoptions)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static productoptions Deserialize(System.IO.Stream s)
    {
      return ((productoptions)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current productoptions object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an productoptions object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output productoptions object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out productoptions obj, out System.Exception exception)
    {
      exception = null;
      obj = default(productoptions);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out productoptions obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out productoptions obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static productoptions LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static productoptions LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://wimbosman.com/order")]
  [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://wimbosman.com/order", IsNullable = false)]
  public partial class options
  {

    private static XmlSerializer serializer;

    [System.Xml.Serialization.XmlElementAttribute("option")]
    public List<Option> option { get; set; }

    public options()
    {
      this.option = new List<Option>();
    }

    private static XmlSerializer Serializer
    {
      get
      {
        if ((serializer == null))
        {
          serializer = new XmlSerializerFactory().CreateSerializer(typeof(options));
        }
        return serializer;
      }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serializes current options object into an XML string
    /// </summary>
    /// <returns>string XML value</returns>
    public virtual string Serialize(System.Text.Encoding encoding)
    {
      System.IO.StreamReader streamReader = null;
      System.IO.MemoryStream memoryStream = null;
      try
      {
        memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = encoding;
        xmlWriterSettings.Indent = true;
        System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
        Serializer.Serialize(xmlWriter, this);
        memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
        streamReader = new System.IO.StreamReader(memoryStream, encoding);
        return streamReader.ReadToEnd();
      }
      finally
      {
        if ((streamReader != null))
        {
          streamReader.Dispose();
        }
        if ((memoryStream != null))
        {
          memoryStream.Dispose();
        }
      }
    }

    public virtual string Serialize()
    {
      return Serialize(System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Deserializes workflow markup into an options object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output options object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out options obj, out System.Exception exception)
    {
      exception = null;
      obj = default(options);
      try
      {
        obj = Deserialize(input);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool Deserialize(string input, out options obj)
    {
      System.Exception exception = null;
      return Deserialize(input, out obj, out exception);
    }

    public static options Deserialize(string input)
    {
      System.IO.StringReader stringReader = null;
      try
      {
        stringReader = new System.IO.StringReader(input);
        return ((options)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
      }
      finally
      {
        if ((stringReader != null))
        {
          stringReader.Dispose();
        }
      }
    }

    public static options Deserialize(System.IO.Stream s)
    {
      return ((options)(Serializer.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current options object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
    {
      exception = null;
      try
      {
        SaveToFile(fileName, encoding);
        return true;
      }
      catch (System.Exception e)
      {
        exception = e;
        return false;
      }
    }

    public virtual bool SaveToFile(string fileName, out System.Exception exception)
    {
      return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
    }

    public virtual void SaveToFile(string fileName)
    {
      SaveToFile(fileName, System.Text.Encoding.UTF8);
    }

    public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.StreamWriter streamWriter = null;
      try
      {
        string xmlString = Serialize(encoding);
        streamWriter = new System.IO.StreamWriter(fileName, false, System.Text.Encoding.UTF8);
        streamWriter.WriteLine(xmlString);
        streamWriter.Close();
      }
      finally
      {
        if ((streamWriter != null))
        {
          streamWriter.Dispose();
        }
      }
    }

    /// <summary>
    /// Deserializes xml markup from file into an options object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output options object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out options obj, out System.Exception exception)
    {
      exception = null;
      obj = default(options);
      try
      {
        obj = LoadFromFile(fileName, encoding);
        return true;
      }
      catch (System.Exception ex)
      {
        exception = ex;
        return false;
      }
    }

    public static bool LoadFromFile(string fileName, out options obj, out System.Exception exception)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
    }

    public static bool LoadFromFile(string fileName, out options obj)
    {
      System.Exception exception = null;
      return LoadFromFile(fileName, out obj, out exception);
    }

    public static options LoadFromFile(string fileName)
    {
      return LoadFromFile(fileName, System.Text.Encoding.UTF8);
    }

    public static options LoadFromFile(string fileName, System.Text.Encoding encoding)
    {
      System.IO.FileStream file = null;
      System.IO.StreamReader sr = null;
      try
      {
        file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
        sr = new System.IO.StreamReader(file, encoding);
        string xmlString = sr.ReadToEnd();
        sr.Close();
        file.Close();
        return Deserialize(xmlString);
      }
      finally
      {
        if ((file != null))
        {
          file.Dispose();
        }
        if ((sr != null))
        {
          sr.Dispose();
        }
      }
    }
  }
}
#pragma warning restore
